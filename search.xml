<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue组件传值方法]]></title>
    <url>%2F2019%2F09%2F08%2FVue%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[父组件传子组件 props子组件 1234567891011121314151617181920&lt;template&gt; &lt;div&gt; &lt;div&gt; 子组件接收父组件的值：&#123;&#123; fatherToChildValue1 &#125;&#125; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; fatherToChildValue1: &#123; type: String, default: '' &#125; &#125;&#125;&lt;/script&gt; 父组件 1234567891011121314151617181920&lt;template&gt; &lt;child :father-to-child-value1="fatherValue1" @childToFather="getFromChild" /&gt; &lt;h2&gt;父组件传值给子组件,props方法&lt;/h2&gt; 父组件输入值：&lt;el-input v-model="fatherValue1" type="text" /&gt;&lt;/template&gt;&lt;script&gt;import Child from '@/components/Child'export default &#123; components: &#123; Child &#125;, data() &#123; return &#123; fatherValue1: '', &#125; &#125;,&#125;&lt;/script&gt; 子组件传父组件 $emit子组件 123456789101112131415161718192021222324&lt;template&gt; &lt;div&gt; &lt;div&gt; 传值给父组件 &lt;el-button type="primary" @click="passToFather"&gt;传值给父组件&lt;/el-button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; message: 'some value from child', i: 0 &#125; &#125;, methods: &#123; passToFather() &#123; this.$emit('childToFather', this.message + (this.i += 1)) &#125; &#125;&#125;&lt;/script&gt; 父组件 123456789101112131415161718192021222324252627&lt;template&gt; &lt;div&gt; &lt;child :father-to-child-value1="fatherValue1" @childToFather="getFromChild" /&gt; &lt;h2&gt;子组件传值给父组件,$emit方法&lt;/h2&gt; 父组件接收到子组件的值：&#123;&#123; childToFatheValue1 &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Child from '@/components/Child'export default &#123; components: &#123; Child &#125;, data() &#123; return &#123; childToFatheValue1: '' &#125; &#125;, methods: &#123; getFromChild(data) &#123; this.childToFatheValue1 = data &#125; &#125;&#125;&lt;/script&gt; vuex 全局变量的方法在store 中配置test.js 1234567891011const test = &#123; state: &#123; vuexValue: '' &#125;, mutations: &#123; setVuexValue: (state, value) =&gt; &#123; state.vuexValue = value &#125; &#125;&#125;export default test 在需要使用的页面引用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;template&gt; &lt;div&gt; &lt;div&gt; vuex传值 &lt;el-button type="danger" @click="setVuex"&gt;子组件改vuex的值&lt;/el-button&gt; 子组件中vuexValue的值&#123;&#123; vuexValue &#125;&#125; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; mapGetters, mapMutations &#125; from 'vuex' // 引用vuexexport default &#123; props: &#123; fatherToChildValue1: &#123; type: String, default: '' &#125; &#125;, data() &#123; return &#123; message: 'some value from child', i: 0 &#125; &#125;, computed: &#123; ...mapGetters([ 'vuexValue' ]) &#125;, methods: &#123; ...mapMutations([ 'setVuexValue' ]), passToFather() &#123; this.$emit('childToFather', this.message + (this.i += 1)) &#125;, setVuex() &#123; this.setVuexValue('子组件' + (this.i += 1)) &#125; &#125;&#125;&lt;/script&gt;&lt;style lang="scss" scoped&gt;&lt;/style&gt; demo 源码 链接: https://pan.baidu.com/s/1_9CGzvMJOX90BKrIGuVD5A 提取码: 3f7v 复制这段内容后打开百度网盘手机App，操作更方便哦 其他方法以上三种是常用的方式，掌握基本够用。还有一些不常用的： 1、bus 2、$parents 子组件修改父组件数据，这要在props的基础上才能使用，子组件修改父组件直接赋值会报错，使用this.$parent.msg = ‘修改父组件’;子组件就可以修改父组件的数据。 3、$ref 父组件： 父组件调用：this.$refs.child 父组件通过$refs调用子组件的方法和属性。 4..sync修饰符： 父组件： 1&lt;child :msg.sync='msg'&gt;&lt;/child&gt; 子组件： watch:{index(val){this.$emit(‘update:msg’, val)}},]]></content>
      <tags>
        <tag>vue</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue 通过el-upload上传文件同时传其他参数]]></title>
    <url>%2F2019%2F04%2F19%2Fvue-%E9%80%9A%E8%BF%87el-%2F</url>
    <content type="text"><![CDATA[前台页面html123456789101112131415161718192021&lt;!-- 表单 --&gt;&lt;el-input type="textarea" :autosize="&#123; minRows: 2&#125;" placeholder="请输入更新内容" v-model="input"&gt;&lt;/el-input&gt;&lt;el-upload class="upload-demo" drag :on-success="handleAvatarSuccess" :on-remove="handleRemove" :limit="1" ref="upload" multiple :file-list="fileList" :before-upload="before_Upload" action="xxxxxxxxxx" &gt; &lt;!-- xxxx 填上传接口--&gt; &lt;i class="el-icon-upload"&gt;&lt;/i&gt; &lt;div class="el-upload__text"&gt; 将文件拖到此处，或 &lt;em&gt;点击上传&lt;/em&gt; &lt;/div&gt;&lt;/el-upload&gt; 参数设置和上传方法 核心代码12345678910111213before_Upload(file) &#123;//这里的file一定要写 let FormDatas = new FormData(); FormDatas.append("file", file); //要上传的文件 FormDatas.append("key", this.input); //增加参数 console.log("FormDatas1", FormDatas); this.$http .post("xxxxxxxxxx", FormDatas) // 填与上面相同的接口 .then(response =&gt; &#123; this.close(); (this.fileList = []), (this.input = ""); console.log("success", response.resultMsg); &#125;);&#125;,]]></content>
      <tags>
        <tag>vue</tag>
        <tag>element</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ionic app 通过微信开发者平台方式增加分享功能]]></title>
    <url>%2F2019%2F03%2F16%2Fionic-app-%E9%80%9A%E8%BF%87%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B9%B3%E5%8F%B0%E6%96%B9%E5%BC%8F%E5%A2%9E%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8A%9F%E8%83%BD1%2F</url>
    <content type="text"><![CDATA[注册微信开发者账号获取appID 填写开发信息：安卓app的包名、应用签名和iOS的Bundle ID 1、包名是config.xml文件中,下面那段的”xx.xxx.xxxx”1234……&lt;widget id="xx.xxx.xxxx" version="1.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0"&gt;…… 应用签名获取方式2.1 安装要添加分享功能的app 2.2 下载签名获取工具，安装。输入上面的包名获取即可。 iOS的Bundle ID看xcode文件中的项目属性即可。 安装微信分享插件cordova-plugin-wechat如果安装缓慢可以在命令前面加ionic ,建议直接从github上拉插件，因为之前作者发布有问题，导致一致报JSON error，找了作者协助才解决。123cordova plugin add https://github.com/xu-li/cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPIDcordova build ios or cordova build android 在config.xml文件中增加一段代码很重要！！看插件源码才发现的。1&lt;preference name="WECHATAPPID" value="YOUR_WECHAT_APPID" /&gt; 在native-service.ts（可自定义）增加分享方法。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import &#123; Injectable &#125; from '@angular/core';import &#123; AlertController, Loading, LoadingController, Platform, ToastController &#125; from 'ionic-angular';……declare var Wechat;……export class NativeService &#123; constructor( private platform: Platform, private alertCtrl: AlertController,) &#123; &#125; …… /** * 是否真机环境 */ isMobile(): boolean &#123; return this.platform.is('mobile') &amp;&amp; !this.platform.is('mobileweb'); &#125; shareWechat(scene) &#123; if (!this.isMobile()) &#123; this.alert('请使用手机app端分享'); return; &#125; Wechat.isInstalled(function (installed) &#123; if (installed) &#123; Wechat.share(&#123; message: &#123; title: "湛江手机台", description: "以新闻资讯为媒，致力打造一个资源共享的穿越于虚拟与现实之间的生活平台", thumb: "http://appadmin.zjwtv.com:9090/zjsjt.png", media: &#123; type: Wechat.Type.WEBPAGE, webpageUrl: "http://appadmin.zjwtv.com:9090/app" &#125; &#125;, scene: scene // share to Timeline &#125;, function () &#123; console.log("分享成功！") &#125;, function (reason) &#123; console.log("分享失败！" + reason) &#125;); &#125;else&#123; this.alert('请先安装微信'); &#125; &#125;, function (reason) &#123; console.log("分享失败！" + reason) &#125;); &#125; &#125; ……&#125; 新增app-share自定义组件，便于项目其他地方调用。 1ionic g component app-share app-share.html 12345678 &lt;!-- Generated template for the AppShareComponent component --&gt;&lt;div&gt; &lt;ion-buttons end&gt; &lt;button class="btn-share" ion-button clear (click)="share($event)"&gt; &lt;ion-icon name="md-share"&gt;&lt;/ion-icon&gt; &lt;/button&gt; &lt;/ion-buttons&gt;&lt;/div&gt; app-share.ts 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758 import &#123; Component &#125; from '@angular/core';import &#123; ActionSheetController &#125; from 'ionic-angular';import &#123; NativeService &#125; from '../../providers/native/native-service';/** * Generated class for the nativeServiceComponent component. * * See https://angular.io/api/core/Component for more info on Angular * Components. */@Component(&#123; selector: 'app-share', templateUrl: 'app-share.html'&#125;)export class AppShareComponent &#123; text: string; constructor( public actionSheetCtrl: ActionSheetController, public nativeService: NativeService ) &#123; console.log('Hello nativeServiceComponent Component'); this.text = 'Hello World'; &#125; share(event) &#123; console.log("当前页" + location.href); let actionSheet = this.actionSheetCtrl.create(&#123; title: '分享', buttons: [ &#123; cssClass: "weChatFriends", handler: () =&gt; &#123; this.nativeService.shareWechat(0) &#125; &#125;, &#123; cssClass: 'weChatMoments', handler: () =&gt; &#123; this.nativeService.shareWechat(1) &#125; &#125;, &#123; text: '取消', role: 'cancel', handler: () =&gt; &#123; console.log('Cancel clicked'); &#125; &#125; ] &#125;); actionSheet.present(); &#125;&#125; 在app.scss中增加样式，注意！一定要在app.scss中增加，否则不生效。123456789101112131415161718.weChatFriends &#123; margin-left: 10px; height: 64px; width: 64px; display:inline-block !important; color: red !important; background: url("../assets/imgs/icon64_wx_logo.png") no-repeat !important; &#125;.weChatMoments &#123; margin-left: 10px; height: 64px; width: 64px; display:inline-block !important; color: red !important; background: url("../assets/imgs/icon_res_download_moments.png") no-repeat !important;&#125; 在需要调用分享功能的页面html中引用即可123…… &lt;app-share&gt;&lt;/app-share&gt;…… 效果图如下所示]]></content>
      <tags>
        <tag>ionic</tag>
        <tag>微信开发者平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS 版app 开发记录]]></title>
    <url>%2F2019%2F03%2F04%2FiOS-%E7%89%88app-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[购买开发者账号填写正确的信息，申请地址https://developer.apple.com/ 创建证书购买完成后登陆https://developer.apple.com/，点击account.再点击下图位置。 详见：https://www.jianshu.com/p/304ec98842e1 配置Xcode 证书环境将证书配置到Xcode 的code siging或者登陆选择automatic。 项目的样式，针对iOS进行优化更改app.module.ts,将样式强制展示位iOS,方便调试。1234567891011121314imports: [ BrowserModule, IonicModule.forRoot(MyApp,&#123; iconMode: 'ios', //安卓icon强制使用ios的icon以及样式 mode: 'ios', //样式强制使用ios样式 （安卓的是'md'） // nativeControlsForTouch: false, backButtonText:'', backButtonIcon: 'ios-arrow-back'&#125;), HttpModule, HttpClientModule, IonicStorageModule.forRoot(),], 修复图文、直播、点播页面样式异常。例如article-detail.css 通过调试发现高度改为210px。 123456.artc&#123; .scroll-content&#123; margin-top: 210px; &#125;&#125; 修复iOS 端自动进入全屏播放给 video 标签加上 playsinline（iOS 10及以上）、webkit-playsinline（iOS 10之前）这两个属性。另外还需要在 config.xml 文件中加上1&lt;preference name="AllowInlineMediaPlayback" value="true" /&gt; 修复iOS 播放有2个进度条问题删掉video标签中的controls 修复iOS app 打开后头部状态栏空白问题在config.xml文件中加上123&lt;preference name="StatusBarOverlaysWebView" value="false" /&gt;&lt;preference name="StatusBarStyle" value="default" /&gt;]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ionic 引入crypto-js 进行AES加密]]></title>
    <url>%2F2019%2F01%2F17%2Fionic-%E5%BC%95%E5%85%A5crypto-js-%E8%BF%9B%E8%A1%8CAES%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[安装crypto-js12npm install crypto-js --savetypings install dt~crypto-js --global --save 创建AES的 provider1ionic g provider aes aes.ts12345678910111213141516171819202122232425262728293031import &#123; Injectable &#125; from '@angular/core';//引入cryptoimport * as CryptoJS from 'crypto-js';//声明字符转换函数declare function escape(s: string): string;@Injectable()export class AesProvider &#123; constructor() &#123; /* 常用缓存： 1.用户基本信息： user */ &#125; //公钥 key = CryptoJS.enc.Utf8.parse('xxxxxxxxxx'); //加密数据 Encrypt(p) &#123; console.log("key", this.key); var encrypted = CryptoJS.AES.encrypt(p, this.key, &#123; mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 &#125;) console.log("tools中的AES加密", encrypted.toString()); //因"+"号传到后台会变成空格，需转换为'%2B' return escape(encrypted.toString()).replace(/\+/g, '%2B'); &#125; //解密数据 Decrypt(p) &#123; var decrypt = CryptoJS.AES.decrypt(p, this.key, &#123; mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 &#125;); return CryptoJS.enc.Utf8.stringify(decrypt).toString(); &#125;&#125; 实例 在需要使用的ts中引入12345678910111213import &#123; AesProvider &#125; from '../../providers/tools/aes';……export class UserProvider &#123; …… constructor(private aes: AesProvider) &#123; &#125; …… login(params) &#123; params.password = this.aes.Encrypt(params.password); &#125;]]></content>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
</search>
